Index: app/src/main/java/io/h3llo/ecoeats/presentation/common/MyComponents.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package io.h3llo.ecoeats.presentation.common\n\nimport androidx.annotation.DrawableRes\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Notifications\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.filled.StarOutline\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.OutlinedTextField\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.material3.TopAppBar\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.input.VisualTransformation\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport io.h3llo.ecoeats.ui.theme.Primary\nimport io.h3llo.ecoeats.ui.theme.Secondary\n\n@Composable\nfun ImageBasic(\n    modifier: Modifier = Modifier,\n    @DrawableRes image: Int,\n    description: String\n) {\n    Image(\n        painter = painterResource(id = image),\n        contentDescription = description,\n        modifier = modifier\n    )\n}\n\n@Composable\nfun SpacerComponent(modifier: Modifier = Modifier) {\n    Spacer(modifier = modifier)\n}\n\n@Composable\nfun TextBasic(\n    modifier: Modifier = Modifier,\n    text: String,\n    style: TextStyle,\n    color: Color = Color.Unspecified\n) {\n\n    Text(\n        modifier = modifier,\n        text = text,\n        style = style,\n        color = color\n    )\n\n}\n\n@Composable\nfun ButtonBasic(\n    modifier: Modifier = Modifier,\n    text: String,\n    containerColor: Color = Primary,\n    contentColor: Color = Color.White,\n    onClick: () -> Unit\n) {\n    Button(\n        onClick = {\n            onClick()\n        },\n        modifier = modifier,\n        colors = ButtonDefaults.buttonColors(\n            containerColor = containerColor,\n            contentColor = contentColor\n        )\n    ) {\n        Text(\n            text = text\n        )\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun OutlinedTextFieldBasic(\n    modifier: Modifier = Modifier,\n    text: String,\n    onValueChange: (String) -> Unit,\n    textLabel: String,\n    roundedDp: Dp = 16.dp,\n    trailingIcon: @Composable (() -> Unit)? = null,\n    keyboardOptions: KeyboardOptions,\n    keyboardActions: KeyboardActions,\n    visualTransformation: VisualTransformation = VisualTransformation.None,\n    isError: Boolean\n) {\n\n    OutlinedTextField(\n        modifier = Modifier.fillMaxWidth(),\n        value = text,\n        onValueChange = {\n            onValueChange(it)\n        },\n        label = {\n            Text(\n                text = textLabel,\n            )\n        },\n        shape = RoundedCornerShape(roundedDp),\n        colors = TextFieldDefaults.colors(\n            focusedTextColor = Primary,\n            focusedContainerColor = Secondary,\n            focusedLabelColor = Primary,\n            focusedIndicatorColor = Primary,\n            focusedTrailingIconColor = Color.Red,\n            focusedLeadingIconColor = Color.Red\n\n        ),\n\n        trailingIcon = trailingIcon,\n        keyboardOptions = keyboardOptions,\n        keyboardActions = keyboardActions,\n        visualTransformation = visualTransformation,\n        isError = isError\n    )\n\n}\n\n@Composable\nfun RatingBarcomponent(\n    modifier: Modifier = Modifier,\n    maxRating: Int = 5,\n    currentRating: Int,\n    starsColor: Color = Color.Yellow\n) {\n    Row {\n        for (i in 1..maxRating) {\n            Icon(\n                imageVector = if (i <= currentRating) Icons.Filled.Star else Icons.Filled.StarOutline,\n                contentDescription = \"Stars\",\n                tint = if (i <= currentRating) starsColor else Color.Unspecified,\n                modifier = modifier.padding(2.dp)\n            )\n        }\n    }\n}\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun TopBarComponent(\n    modifier: Modifier = Modifier,\n    title: String = \"\",\n    imageVector: ImageVector,\n    onIconClick: ()->Unit\n) {\n    TopAppBar(\n        modifier = modifier,\n        title = {\n            if (title != \"\") {\n                Text(text = title)\n            }\n        },\n        actions = {\n            Icon(\n                imageVector = Icons.Filled.Notifications,\n                contentDescription = \"Notifications\",\n                modifier = Modifier.padding(end = 12.dp),\n                tint = Primary\n            )\n        },\n        navigationIcon = {\n            IconButton(onClick = { onIconClick() } ){\n                Icon(\n                    imageVector = imageVector,\n                    contentDescription = \"navigationIcon\"\n                )\n            }\n\n        }\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/io/h3llo/ecoeats/presentation/common/MyComponents.kt b/app/src/main/java/io/h3llo/ecoeats/presentation/common/MyComponents.kt
--- a/app/src/main/java/io/h3llo/ecoeats/presentation/common/MyComponents.kt	(revision fdeb7dcbfd64fe6891fc1e66a916965b8dd00927)
+++ b/app/src/main/java/io/h3llo/ecoeats/presentation/common/MyComponents.kt	(date 1728311245920)
@@ -122,7 +122,7 @@
         shape = RoundedCornerShape(roundedDp),
         colors = TextFieldDefaults.colors(
             focusedTextColor = Primary,
-            focusedContainerColor = Secondary,
+            focusedContainerColor = Color.White,
             focusedLabelColor = Primary,
             focusedIndicatorColor = Primary,
             focusedTrailingIconColor = Color.Red,
Index: app/src/main/java/io/h3llo/ecoeats/presentation/sign_in/SignInViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package io.h3llo.ecoeats.presentation.sign_in\n\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport dagger.hilt.android.lifecycle.HiltViewModel\nimport io.h3llo.ecoeats.core.Result\nimport io.h3llo.ecoeats.domain.use_cases.sign_in_use_case.SignInUseCase\nimport io.h3llo.ecoeats.domain.use_cases.validate_field_use_case.ValidateFieldUseCase\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\nimport javax.inject.Inject\n\n@HiltViewModel\nclass SignInViewModel @Inject constructor(\n\n    // val repository: AuthRepository\n    val signInUseCase: SignInUseCase,\n    val validateFieldUseCase: ValidateFieldUseCase\n\n) : ViewModel() {\n\n    //COMPONENT STATE\n    var formState by mutableStateOf(LoginFormState())\n\n    //SCREEN STATE\n    var state by mutableStateOf(LoginScreenState())\n\n    //EVENTS\n    fun onEvent( event : LoginFormEvent){\n        when(event){\n            is LoginFormEvent.EmailChange -> {\n                formState = formState.copy(email = event.email)\n            }\n            is LoginFormEvent.PasswordChange -> {\n                formState = formState.copy(password =  event.password )\n            }\n            LoginFormEvent.Submit -> {\n                signIn()\n            }\n            is LoginFormEvent.VisualTransformationChange -> {\n                formState = formState.copy(visualTransformation = event.visualTransformation)\n            }\n\n            LoginFormEvent.onFocusChange -> {\n                formState = formState.copy(emailError = null )\n            }\n        }\n    }\n\n\n    fun signIn() {\n\n        // val repository = AuthRepository()\n\n\n        state = state.copy(isLoading = true)\n\n        viewModelScope.launch {\n            try {\n\n                /*\n                val result = validateFieldUseCase(formState.email)\n\n                if(!result.successful){\n                    // email field is empty, send message to the view\n                    formState = formState.copy(emailError = result.errorMessage )\n                    state = state.copy(isLoading = false)\n                    return@launch\n                }\n                 */\n\n                val response = withContext(Dispatchers.IO){\n                    // repository.signIn(formState.email, formState.password)\n                    signInUseCase(formState.email, formState.password)\n                }\n\n                when(response){\n                    is Result.Error -> {\n                        state = state.copy(isLoading = false, error = response.message, success = null)\n                    }\n                    is Result.Success -> {\n                        state = state.copy(isLoading = false, success =  response.data, error = null)\n                    }\n\n                    is Result.Validation -> {\n                        formState = formState.copy(emailError = response.message)\n                        state = state.copy(isLoading = false )\n\n                    }\n                }\n\n            }catch (ex:Exception){\n                state = state.copy(error = ex.message, isLoading = false)\n            }\n\n        }\n\n\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/io/h3llo/ecoeats/presentation/sign_in/SignInViewModel.kt b/app/src/main/java/io/h3llo/ecoeats/presentation/sign_in/SignInViewModel.kt
--- a/app/src/main/java/io/h3llo/ecoeats/presentation/sign_in/SignInViewModel.kt	(revision fdeb7dcbfd64fe6891fc1e66a916965b8dd00927)
+++ b/app/src/main/java/io/h3llo/ecoeats/presentation/sign_in/SignInViewModel.kt	(date 1730385927672)
@@ -30,6 +30,8 @@
     //SCREEN STATE
     var state by mutableStateOf(LoginScreenState())
 
+
+
     //EVENTS
     fun onEvent( event : LoginFormEvent){
         when(event){
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"jbr-21\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision fdeb7dcbfd64fe6891fc1e66a916965b8dd00927)
+++ b/.idea/misc.xml	(date 1729030751688)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"ComposePreviewDimensionRespectsLimit\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewMustBeTopLevelFunction\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewNeedsComposableAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewNotSupportedInUnitTestFiles\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewDimensionRespectsLimit\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewMustBeTopLevelFunction\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewNeedsComposableAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewNotSupportedInUnitTestFiles\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewAnnotationInFunctionWithParameters\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewApiLevelMustBeValid\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewDimensionRespectsLimit\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewFontScaleMustBeGreaterThanZero\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewMultipleParameterProviders\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewMustBeTopLevelFunction\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewNeedsComposableAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewNotSupportedInUnitTestFiles\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewPickerAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n  </profile>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision fdeb7dcbfd64fe6891fc1e66a916965b8dd00927)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1730250392250)
@@ -37,6 +37,9 @@
       <option name="composableFile" value="true" />
       <option name="previewFile" value="true" />
     </inspection_tool>
+    <inspection_tool class="PreviewDeviceShouldUseNewSpec" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+    </inspection_tool>
     <inspection_tool class="PreviewDimensionRespectsLimit" enabled="true" level="WARNING" enabled_by_default="true">
       <option name="composableFile" value="true" />
     </inspection_tool>
